version: "3"
services:
  home:
    image: httpd
    container_name: home
    hostname: home
    restart: always
    ports:
      - "80:80"
    volumes:
      - ./volume/home:/usr/local/apache2/htdocs/
    networks:
      net:
        ipv4_address: 192.168.10.13

  fluentd:
    build: ./dockerfiles/fluentd
    container_name: fluentd
    hostname: fluentd
    restart: always
    volumes:
      - ./volume/fluentd/conf:/fluentd/etc
    links:
      - "elasticsearch"
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      net:
        ipv4_address: 192.168.10.12

  web-fluentd:
    image: httpd
    container_name: web-fluentd
    hostname: web-fluentd
    restart: always
    ports:
      - "81:80"
    depends_on:
      - fluentd
    links:
      - fluentd
    logging:
      driver: "fluentd"
      options:
        fluentd-address: 192.168.10.12:24224 #<IP> or <hostname[fluentd]>
        fluentd-async-connect: "true"
        fluentd-retry-wait: 1s
        fluentd-max-retries: 30
        tag: httpd.access
    networks:
      net:
        ipv4_address: 192.168.10.11

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.1.2
    container_name: elasticsearch
    hostname: elasticsearch
    restart: always
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "xpack.security.enrollment.enabled=false"
    expose:
      - "9200"
    ports:
      - "9200:9200"
    networks:
      net:
        ipv4_address: 192.168.10.10

  kibana:
    image: docker.elastic.co/kibana/kibana:8.1.2
    container_name: kibana
    hostname: kibana
    restart: always
    depends_on:
      - elasticsearch
    links:
      - elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=false
    ports:
      - "5601:5601"
    networks:
      net:
        ipv4_address: 192.168.10.9

  semantic:
    image: openjdk
    container_name: ufcity-semantic
    hostname: ufcity-semantic
    restart: always
    volumes:
      - ./volume/ufcity-semantic:/usr/src/ufcity-semantic
    working_dir: /usr/src/ufcity-semantic
    command: java -jar ufcity-fog-semantic-1.0-SNAPSHOT.jar
    networks:
      net:
        ipv4_address: 192.168.10.8

  mongo:
    image: mongo
    container_name: mongo
    hostname: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    networks:
      net:
        ipv4_address: 192.168.10.7
  mongo-express:
    image: mongo-express
    container_name: mongo-express
    hostname: mongo-express
    restart: always
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
    networks:
      net:
        ipv4_address: 192.168.10.6

  fuseki:
    image: stain/jena-fuseki
    container_name: fuseki
    hostname: fuseki
    restart: always 
    ports:
      - 3030:3030
    environment:
      - ADMIN_PASSWORD=ufcity
      - TDB=2
      - FUSEKI_DATASET_1=ufcity-ont
    networks:
      net:
        ipv4_address: 192.168.10.5

  handler:
    image: openjdk
    container_name: ufcity-handler
    hostname: ufcity-handler
    restart: always
    volumes:
      - ./volume/ufcity-handler:/usr/src/ufcity-handler
    working_dir: /usr/src/ufcity-handler
    command: java -jar ufcity-fog-handler-1.0-SNAPSHOT.jar
    networks:
      net:
        ipv4_address: 192.168.10.4

  cep:
    image: openjdk
    container_name: ufcity-cep
    hostname: ufcity-cep
    restart: always
    volumes:
      - ./volume/ufcity-cep:/usr/src/ufcity-cep
    working_dir: /usr/src/ufcity-cep
    command: java -jar ufcity-fog-cep-1.0-SNAPSHOT.jar
    networks:
      net:
        ipv4_address: 192.168.10.3

  mqtt:
    image: eclipse-mosquitto
    container_name: mqtt
    hostname: mqtt
    restart: always
    volumes:
      - ./volume/mqtt/mosquitto:/mosquitto
      - ./volume/mqtt/mosquitto/config:/mosquitto/config
      - ./volume/mqtt/mosquitto/data:/mosquitto/data
      - ./volume/mqtt/mosquitto/log:/mosquitto/log
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      net:
        ipv4_address: 192.168.10.2

networks:
  net:
    driver: "bridge"
    ipam:
      config:
        - subnet: 192.168.10.0/27